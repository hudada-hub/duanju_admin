generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
}

model Article {
  id           Int            @id @default(autoincrement())
  title        String         @db.VarChar(200)
  summary      String?        @db.Text
  content      String         @db.Text
  coverUrl     String?        @db.VarChar(500) // 封面图URL
  viewCount    Int            @default(0)
  likeCount    Int           @default(0)
  commentCount Int           @default(0)
  status       ArticleStatus @default(DRAFT)
  category     ArticleCategory @relation(fields: [categoryId], references: [id])
  categoryId   Int
  author       User          @relation(fields: [authorId], references: [id])
  authorId     Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([categoryId])
  @@index([authorId])
  @@index([status])
  @@index([createdAt])
}

model ArticleCategory {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String?  @db.Text
  sort        Int      @default(0)
  isEnabled   Boolean  @default(true)
  parentId    Int?
  parent      ArticleCategory?  @relation("CategoryChildren", fields: [parentId], references: [id])
  children    ArticleCategory[] @relation("CategoryChildren")
  articles    Article[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  USER
  SUPER_ADMIN
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  DELETED
}

model User {
  id          Int      @id @default(autoincrement())
  nickname    String   @unique
  phone       String   @unique
  password    String
  email       String?  @unique
  avatar      String?  @default("/default-avatar.png")
  role        UserRole     @default(USER)
  status      UserStatus   @default(ACTIVE)
  loginCount  Int      @default(0)
  lastLoginIp String?
  bio         String?
  wechat      String?  // 微信号
  qq          String?  // QQ号
  points      Int      @default(0)  // 积分点数
  studyTime   Int      @default(0)  // 学习时长（分钟）
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime @default(now())
  shortsCount Int      @default(0)  // 短剧节数

  // 角色关联
  userRoles   UserRoleRelation[]
  withDrawPoints Int      @default(0)  // 提现积分

  // 现有关联
  articles       Article[]
  orders         Order[]
  
  // 短剧相关关联
  shortsOrders        ShortsOrder[]
  shortsComments      ShortsComment[]
  shortsCommentLikes  ShortsCommentLike[]
  shortsFavorites    ShortsFavorite[]

  withdrawRecords   WithdrawRecord[]  // 提现记录
  userWithdrawRecords UserWithdrawRecord[] // 用户提现记录

  messages         UserMessage[]      // 用户留言
  shortsChapterLogs   ShortsChapterLog[] // 学习行为记录

  // 短剧章节上传
  uploadedChapters ShortsChapter[]

  // 签到相关关联
  signIns              UserSignIn[]
  signInPointsRecords  SignInPointsRecord[] @relation("UserSignInPoints")

  @@index([phone])
  @@index([points])  // 添加积分索引
  Short Short[]
  shortsLike ShortsLike[]
}

// 配置项类型枚举
enum ConfigType {
  TEXT          // 单行文本
  TEXTAREA      // 多行文本
  IMAGE         // 单张图片
  MULTI_IMAGE   // 多张图片
  MULTI_TEXT    // 多行文本（带链接）
  MULTI_CONTENT // 多文本图片混合（带链接）
  RICH_TEXT     // 富文本编辑器
}

// 配置表
model Config {
  id          Int         @id @default(autoincrement())
  key         String      @unique @db.VarChar(100) // 配置键名
  title       String      @db.VarChar(100) // 配置名称
  type        ConfigType  // 配置类型
  description String?     @db.Text // 配置描述
  sort        Int         @default(0) // 排序
  isEnabled   Boolean     @default(true) // 是否启用
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // 根据type类型，关联不同的值表
  textValue           ConfigTextValue?          // TEXT/TEXTAREA类型的值
  imageValue         ConfigImageValue?         // IMAGE类型的值
  multiImageValues    ConfigMultiImageValue[]   // MULTI_IMAGE类型的值
  multiTextValues     ConfigMultiTextValue[]    // MULTI_TEXT类型的值
  multiContentValues  ConfigMultiContentValue[] // MULTI_CONTENT类型的值

  @@index([type])
  @@index([sort])
  @@index([isEnabled])
}

// 文本类型配置值表（用于TEXT和TEXTAREA类型）
model ConfigTextValue {
  id        Int      @id @default(autoincrement())
  config    Config   @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId  Int      @unique // 一对一关系
  value     String   @db.Text
  updatedAt DateTime @updatedAt

  @@index([configId])
}

// 图片类型配置值表（用于IMAGE类型）
model ConfigImageValue {
  id        Int      @id @default(autoincrement())
  config    Config   @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId  Int      @unique // 一对一关系
  url       String   @db.VarChar(500)
  link      String?  @db.VarChar(500) // 可选的跳转链接
  alt       String?  @db.VarChar(200) // 图片描述
  updatedAt DateTime @updatedAt

  @@index([configId])
}

// 多图片类型配置值表（用于MULTI_IMAGE类型）
model ConfigMultiImageValue {
  id        Int      @id @default(autoincrement())
  config    Config   @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId  Int
  url       String   @db.VarChar(500)
  link      String?  @db.VarChar(500) // 可选的跳转链接
  alt       String?  @db.VarChar(200) // 图片描述
  sort      Int      @default(0)
  updatedAt DateTime @updatedAt

  @@index([configId, sort])
}

// 多文本类型配置值表（用于MULTI_TEXT类型）
model ConfigMultiTextValue {
  id        Int      @id @default(autoincrement())
  config    Config   @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId  Int
  title     String   @db.VarChar(200)
  content   String   @db.Text
  contentEn String?  @db.Text // 英文内容
  link      String?  @db.VarChar(500) // 可选的跳转链接
  sort      Int      @default(0)
  updatedAt DateTime @updatedAt

  @@index([configId, sort])
}

// 多文本图片混合类型配置值表（用于MULTI_CONTENT类型）
model ConfigMultiContentValue {
  id        Int      @id @default(autoincrement())
  config    Config   @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId  Int
  title     String   @db.VarChar(200)
  content   String   @db.Text
  contentEn String?  @db.Text // 英文内容
  imageUrl  String?  @db.VarChar(500)
  link      String?  @db.VarChar(500) // 可选的跳转链接
  alt       String?  @db.VarChar(200) // 图片描述
  sort      Int      @default(0)
  updatedAt DateTime @updatedAt

  @@index([configId, sort])
}

// 订单状态枚举
enum OrderStatus {
  PENDING    // 待支付
  PAID       // 已支付
  CANCELLED  // 已取消
  REFUNDED   // 已退款
  FAILED     // 支付失败
}

// 支付方式枚举
enum PaymentMethod {
  APPLE     // 苹果支付
  MOMO     // momo支付
}

// 订单表
model Order {
  id            String       @id @default(cuid()) // 使用cuid作为订单ID
  orderNo       String      @unique // 订单编号（展示用）
  title         String      // 订单标题
  amount        Decimal     @db.Decimal(10, 2) // 订单金额
  status        OrderStatus @default(PENDING) // 订单状态
  paymentMethod PaymentMethod // 支付方式
  
  // 支付相关信息
  paymentTime   DateTime?   // 支付时间
  paymentNo     String?     // 支付平台交易号
  refundTime    DateTime?   // 退款时间
  refundNo      String?     // 退款单号
  
  // 关联用户
  user          User?        @relation(fields: [userId], references: [id])
  userId        Int?

  // 订单详情（根据type存储不同的关联ID）
  shortsId      Int?        // 短剧ID
  taskId        Int?        // 任务ID
  
  // 其他信息
  remark        String?     // 订单备注
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  expiredAt     DateTime    // 订单过期时间
  metadata      Json?       // 订单元数据

  @@index([userId])
  @@index([orderNo])
  @@index([status])
  @@index([createdAt])
}

// 验证码表
model VerificationCode {
  id        String   @id @default(cuid())
  phone     String   // 手机号
  code      String   // 验证码
  expiresAt DateTime // 过期时间
  type      String   // 验证码类型
  isUsed    Boolean  @default(false) // 是否已使用
  createdAt DateTime @default(now()) // 创建时间
  updatedAt DateTime @updatedAt // 更新时间

  @@index([phone, code])
  @@index([phone, expiresAt])
}

// 短剧状态枚举
enum ShortStatus {
  COMPLETED   // 已完结
  ONGOING     // 未完结
}

// 短剧分类表
model ShortsCategory {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  shorts     Short[]
}

// 短剧方向表
model ShortsDirection {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  shorts     Short[]
}

// 视频短剧表
model Short {
  id              Int              @id @default(autoincrement()) // 短剧ID
  title           String           @db.VarChar(200)              // 短剧标题
  coverUrl        String           @db.VarChar(500)              // 封面图片URL
  summary         String?          @db.Text                      // 短剧简介
  description     String           @db.Text                      // 短剧详细描述
  instructor      String           @db.VarChar(100)              // 导演姓名
  viewCount       Int              @default(0)                   // 观看次数
  
  direction       ShortsDirection  @relation(fields: [directionId], references: [id]) // 短剧方向关联
  directionId     Int                                                                  // 方向ID
  status         ShortStatus     @default(ONGOING)                                     // 短剧状态（连载中/已完结）
  episodeCount   Int              @default(0)                                          // 章节总数
  totalDuration  Int              @default(0)                                          // 总时长（分钟）
  tags           String[]                                                               // 短剧标签数组
  likeCount      Int             @default(0)                                           // 点赞数量
  favoriteCount  Int             @default(0)                                           // 收藏数量
  isTop          Boolean         @default(false)                                       // 是否置顶
  isDeleted      Boolean         @default(false)                                       // 是否删除（软删除）
  isHidden       Boolean         @default(false)                                       // 是否隐藏
  isFree         Boolean         @default(false)                                       // 是否免费
  
  category       ShortsCategory  @relation(fields: [categoryId], references: [id])      // 短剧分类关联
  categoryId     Int                                                                   // 分类ID
  createdAt      DateTime        @default(now())                                       // 创建时间
  updatedAt      DateTime        @updatedAt

  // 关联
  chapters       ShortsChapter[]
  orders         ShortsOrder[]
  comments       ShortsComment[]
  favorites      ShortsFavorite[]
  shortsChapterLogs ShortsChapterLog[]
  shortsLikes      ShortsLike[]

  uploader       User           @relation(fields: [uploaderId], references: [id])
  uploaderId     Int

  @@index([directionId])
  @@index([categoryId])
  @@index([status])
  @@index([isTop])
  @@index([isDeleted])
  @@index([isHidden])
}

// 视频章节表
model ShortsChapter {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(200)

  description String?  @db.Text
  videoUrl    String?   @db.VarChar(500)
  shorts      Short   @relation(fields: [shortsId], references: [id])
  shortsId    Int
  duration    Int?      // 时长（分钟）
  points      Int      @default(0) // 所需积分
  viewCount   Int      @default(0)
  sort        Int      @default(0)
  uploader    User     @relation(fields: [uploaderId], references: [id]) // 上传人
  uploaderId  Int      // 上传人ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      ShortsOrder[] // 添加反向关系
  shortsChapterLogs ShortsChapterLog[] // 观看短剧记录
  coverUrl    String? @db.VarChar(500)

  @@index([shortsId])
  @@index([sort])
  @@index([uploaderId])
}

// 用户购买短剧订单表
model ShortsOrder {
  id          String    @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  shorts      Short   @relation(fields: [shortsId], references: [id])
  shortsId    Int
  chapter     ShortsChapter? @relation(fields: [chapterId], references: [id])
  chapterId   Int?
  points      Int      // 购买使用的积分
  progress    Float    @default(0) // 学习进度（百分比）
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


  @@index([userId])
  @@index([shortsId])
  @@index([chapterId])
}

// 短剧评论表
model ShortsComment {
  id          Int      @id @default(autoincrement())
  content     String   @db.Text
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  shorts      Short   @relation(fields: [shortsId], references: [id])
  shortsId    Int
  chapterId   Int?     // 可选，指定是哪个视频章节的评论
  createdAt   DateTime @default(now())
  parentId    Int?     // 父评论ID
  parent      ShortsComment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies     ShortsComment[] @relation("CommentReplies")
  likes       ShortsCommentLike[]

  pics        String[] @default([]) // 图片

  @@index([userId])
  @@index([shortsId])
  @@index([chapterId])
  @@index([parentId])
}

// 短剧评论点赞表
model ShortsCommentLike {
  id          Int           @id @default(autoincrement())
  comment     ShortsComment @relation(fields: [commentId], references: [id])
  commentId   Int
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime      @default(now())

  @@unique([userId, commentId])
}

// 短剧点赞表
model ShortsLike {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  shorts      Short   @relation(fields: [shortsId], references: [id])
  shortsId    Int
  createdAt   DateTime @default(now())

  @@unique([userId, shortsId])
  @@index([shortsId])
}

// 短剧收藏表
model ShortsFavorite {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  shorts      Short   @relation(fields: [shortsId], references: [id])
  shortsId    Int
  createdAt   DateTime @default(now())

  @@unique([userId, shortsId])
  @@index([shortsId])
}

// 提现记录表
model WithdrawRecord {
  id              Int       @id @default(autoincrement())
  taskId          Int       // 关联的任务ID
  userId          Int       // 提现用户ID
  amount          Float     // 提现金额
  actualAmount    Float     // 实际到账金额（扣除手续费后）
  fee             Float     // 手续费
  accountType     String    // 账户类型：alipay, bankcard
  accountInfo     Json      // 账户信息（JSON格式）
  status          String    // 提现状态：PROCESSING, SUCCESS, FAILED, CLOSED
  alipayOrderId   String?   // 支付宝订单号
  alipayResponse  Json?     // 支付宝响应信息
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id])

  @@index([taskId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

// 用户提现记录表
model UserWithdrawRecord {
  id              Int       @id @default(autoincrement())
  userId          Int       // 提现用户ID
  withdrawNo      String    @unique // 提现单号
  amount          Float     // 提现金额（积分）
  accountInfo     Json      // 账户信息（JSON格式，包含支付宝账号、真实姓名等）
  status          String    @default("PENDING") // 提现状态：PENDING, PROCESSING, SUCCESS, FAILED, CANCELLED
  alipayOrderId   String?   // 支付宝订单号
  alipayResponse  Json?     // 支付宝响应信息
  processedAt     DateTime? // 处理时间
  completedAt     DateTime? // 完成时间
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // 关联关系
  user            User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([withdrawNo])
  @@index([status])
  @@index([createdAt])
}

// 用户留言表
model UserMessage {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  content     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([createdAt])
}

// 学习行为记录表
model ShortsChapterLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  shortsId  Int
  chapterId Int
  progress  Int      @default(0)  
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  shorts    Short   @relation(fields: [shortsId], references: [id])
  chapter   ShortsChapter @relation(fields: [chapterId], references: [id])

  @@index([userId])
  @@index([shortsId])
  @@index([chapterId])
  @@index([timestamp])
}

// 角色表
model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  isEnabled   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联
  userRoles   UserRoleRelation[]
  rolePermissions RolePermission[]

  @@index([name])
  @@index([isEnabled])
}

// 权限表
model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  resource    String   @db.VarChar(100) // 资源名称：user, short, article, etc.
  isEnabled   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联
  rolePermissions RolePermission[]

  @@index([name])
  @@index([resource])
  @@index([isEnabled])
}

// 用户角色关联表
model UserRoleRelation {
  id        Int      @id @default(autoincrement())
  userId    Int
  roleId    Int
  createdAt DateTime @default(now())

  // 关联
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

// 角色权限关联表
model RolePermission {
  id           Int      @id @default(autoincrement())
  roleId       Int
  permissionId Int
  createdAt    DateTime @default(now())

  // 关联
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

// 用户签到表
model UserSignIn {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  signInDate  DateTime @default(now()) // 签到日期
  points      Int      @default(0)     // 本次签到获得的积分
  continuous  Int      @default(1)     // 连续签到天数
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联：保持现有的关系名称
  signInPointsRecords SignInPointsRecord[] @relation("UserSignInPoints")

  @@unique([userId, signInDate]) // 确保用户每天只能签到一次
  @@index([userId])
  @@index([signInDate])
  @@index([continuous])
}

// 签到积分记录表
model SignInPointsRecord {
  id        Int      @id @default(autoincrement())
  user      User     @relation("UserSignInPoints", fields: [userId], references: [id])
  userId    Int
  signIn    UserSignIn @relation("UserSignInPoints", fields: [signInId], references: [id])
  signInId  Int
  points      Int      @default(0)     // 获得的积分数量
  reason      String   @db.VarChar(200) // 积分获得原因（如：每日签到、连续签到奖励等）
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([signInId])
  @@index([createdAt])
}














